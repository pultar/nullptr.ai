<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>array on nullptr.ai</title>
    <link>https://nullptr.ai/tags/array/</link>
    <description>Recent content in array on nullptr.ai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Jan 2023 12:00:00 +0000</lastBuildDate>
    <atom:link href="https://nullptr.ai/tags/array/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3. Longest Substring Without Repeating Characters</title>
      <link>https://nullptr.ai/blog/3-longest-substring-without-repeating-characters/</link>
      <pubDate>Mon, 30 Jan 2023 12:00:00 +0000</pubDate>
      <guid>https://nullptr.ai/blog/3-longest-substring-without-repeating-characters/</guid>
      <description>Problem Statement The problem is taken from LeetCode.&#xA;Initial Solution: Hash Set and Sliding Window Instead of going through the std::string multiple times, we use the sliding window technique. We keep track of a global max, as well as two pointers low and high, all initialized to 0.</description>
    </item>
    <item>
      <title>542. 01 Matrix</title>
      <link>https://nullptr.ai/blog/542-01-matrix/</link>
      <pubDate>Wed, 25 Jan 2023 11:00:00 +0000</pubDate>
      <guid>https://nullptr.ai/blog/542-01-matrix/</guid>
      <description>Problem Statement The problem is taken from LeetCode.&#xA;First Solution - Breadth-First Search Computing closest distances in a matrix should always trigger BFS. We initialize a std::vector for the computed distances results. There is two ways we can go about performing BFS: either we start from all 1&#39;s and try to find the closest 0, or we start from all 0&#39;s and try to find all 1&#39;s.</description>
    </item>
    <item>
      <title>57. Insert Interval</title>
      <link>https://nullptr.ai/blog/57-insert-interval/</link>
      <pubDate>Wed, 25 Jan 2023 11:00:00 +0000</pubDate>
      <guid>https://nullptr.ai/blog/57-insert-interval/</guid>
      <description>The Problem Statement This problem is taken from LeetCode.&#xA;The Solution We will allocate a new std::vector and reserve a capacity of intervals.size() + 1. We loop over all intervals and during each step check if the end of the newInterval is smaller than the head of the current interval.</description>
    </item>
    <item>
      <title>53. Maximum Subarray</title>
      <link>https://nullptr.ai/blog/53-maximum-subarray/</link>
      <pubDate>Tue, 24 Jan 2023 13:00:00 +0000</pubDate>
      <guid>https://nullptr.ai/blog/53-maximum-subarray/</guid>
      <description>The Problem Statement This problem is taken from LeetCode.&#xA;The Solution - Kadane&#39;s Algorithm It is very easy to end up with a solution that is $O(N^2)$ or $O(N^3)$ in time complexity by comparing all possible subarrays. The challenge is to find a solution that is only $O(N)$.</description>
    </item>
    <item>
      <title>217. Contains Duplicate</title>
      <link>https://nullptr.ai/blog/217-contains-duplicate/</link>
      <pubDate>Mon, 23 Jan 2023 20:59:00 +0000</pubDate>
      <guid>https://nullptr.ai/blog/217-contains-duplicate/</guid>
      <description>The Problem Statement This problem is taken from LeetCode.&#xA;First Solution: std::unordered_set In order to avoid quadratic time complexity resulting from comparing each pair of numbers, we can use a std::unordered_set&amp;lt;int&amp;gt;. We iterate once through all elements and check if the element in already in our set.</description>
    </item>
    <item>
      <title>876. Middle of the Linked List</title>
      <link>https://nullptr.ai/blog/876-middle-of-the-linked-list/</link>
      <pubDate>Mon, 23 Jan 2023 12:00:00 +0000</pubDate>
      <guid>https://nullptr.ai/blog/876-middle-of-the-linked-list/</guid>
      <description>The Problem Statement The problem is taken from LeetCode.&#xA;First Solution: Na√Øve Copy to std::vector The underlying problem here is that linked lists don&#39;t have random access. If the data structure we operate on were a std::vector or std::array, we could simply calculate the middle via the size of the container.</description>
    </item>
  </channel>
</rss>
